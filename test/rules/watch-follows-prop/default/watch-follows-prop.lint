import { Component, Prop, Watch } from '@stencil/core';

// Pass: No props or watchers
@Component({
    tag: 'my-element-a'
})
export class ElementA {
    someFunction() { }
}

// Pass: Prop only
@Component({
    tag: 'my-element-b'
})
export class ElementB {
    @Prop() myProp: string;
}

// Pass: Prop with following Watch
@Component({
    tag: 'my-element-c'
})
export class ElementC {
  @Prop() myProp: string;
  @Watch('myProp')
  myPropChanged() { }
}

// Pass: State with following Watch
@Component({
    tag: 'my-element-c'
})
export class ElementC {
  @State() myState: string;
  @Watch('myState')
  myPropChanged() { }
}

// Fail: watch precedes prop
@Component({
    tag: 'my-element-d'
})
export class ElementD {
    @Watch('myProp')
    ~~~~~~~~~~~~~~~~
    myPropChanged() { }
~~~~~~~~~~~~~~~~~~~~~~~ [failure]

    @Prop() myProp: string;
}

// Fail: watch follows prop but not immediately
@Component({
    tag: 'my-element-e'
})
export class ElementE {

    @Prop() myProp: string;
    @Prop() propB: string;

    @Watch('myProp')
    ~~~~~~~~~~~~~~~~
    myPropChanged() { }
~~~~~~~~~~~~~~~~~~~~~~~ [failure]
}

[failure]: Watch methods should immediately follow the declaration of the Prop/State they watch